// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ContractConfig.proto

#ifndef PROTOBUF_ContractConfig_2eproto__INCLUDED
#define PROTOBUF_ContractConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ContractConfig_2eproto();
void protobuf_AssignDesc_ContractConfig_2eproto();
void protobuf_ShutdownFile_ContractConfig_2eproto();

class ContractConfig;
class ContractConfig_ContractItem;

// ===================================================================

class ContractConfig_ContractItem : public ::google::protobuf::Message {
 public:
  ContractConfig_ContractItem();
  virtual ~ContractConfig_ContractItem();

  ContractConfig_ContractItem(const ContractConfig_ContractItem& from);

  inline ContractConfig_ContractItem& operator=(const ContractConfig_ContractItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContractConfig_ContractItem& default_instance();

  void Swap(ContractConfig_ContractItem* other);

  // implements Message ----------------------------------------------

  ContractConfig_ContractItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContractConfig_ContractItem& from);
  void MergeFrom(const ContractConfig_ContractItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ContractName = 1;
  inline bool has_contractname() const;
  inline void clear_contractname();
  static const int kContractNameFieldNumber = 1;
  inline const ::std::string& contractname() const;
  inline void set_contractname(const ::std::string& value);
  inline void set_contractname(const char* value);
  inline void set_contractname(const char* value, size_t size);
  inline ::std::string* mutable_contractname();
  inline ::std::string* release_contractname();
  inline void set_allocated_contractname(::std::string* contractname);

  // optional string ContractCode = 2;
  inline bool has_contractcode() const;
  inline void clear_contractcode();
  static const int kContractCodeFieldNumber = 2;
  inline const ::std::string& contractcode() const;
  inline void set_contractcode(const ::std::string& value);
  inline void set_contractcode(const char* value);
  inline void set_contractcode(const char* value, size_t size);
  inline ::std::string* mutable_contractcode();
  inline ::std::string* release_contractcode();
  inline void set_allocated_contractcode(::std::string* contractcode);

  // optional string BeginTime1 = 3;
  inline bool has_begintime1() const;
  inline void clear_begintime1();
  static const int kBeginTime1FieldNumber = 3;
  inline const ::std::string& begintime1() const;
  inline void set_begintime1(const ::std::string& value);
  inline void set_begintime1(const char* value);
  inline void set_begintime1(const char* value, size_t size);
  inline ::std::string* mutable_begintime1();
  inline ::std::string* release_begintime1();
  inline void set_allocated_begintime1(::std::string* begintime1);

  // optional string EndTime1 = 4;
  inline bool has_endtime1() const;
  inline void clear_endtime1();
  static const int kEndTime1FieldNumber = 4;
  inline const ::std::string& endtime1() const;
  inline void set_endtime1(const ::std::string& value);
  inline void set_endtime1(const char* value);
  inline void set_endtime1(const char* value, size_t size);
  inline ::std::string* mutable_endtime1();
  inline ::std::string* release_endtime1();
  inline void set_allocated_endtime1(::std::string* endtime1);

  // optional string BeginTime2 = 5;
  inline bool has_begintime2() const;
  inline void clear_begintime2();
  static const int kBeginTime2FieldNumber = 5;
  inline const ::std::string& begintime2() const;
  inline void set_begintime2(const ::std::string& value);
  inline void set_begintime2(const char* value);
  inline void set_begintime2(const char* value, size_t size);
  inline ::std::string* mutable_begintime2();
  inline ::std::string* release_begintime2();
  inline void set_allocated_begintime2(::std::string* begintime2);

  // optional string EndTime2 = 6;
  inline bool has_endtime2() const;
  inline void clear_endtime2();
  static const int kEndTime2FieldNumber = 6;
  inline const ::std::string& endtime2() const;
  inline void set_endtime2(const ::std::string& value);
  inline void set_endtime2(const char* value);
  inline void set_endtime2(const char* value, size_t size);
  inline ::std::string* mutable_endtime2();
  inline ::std::string* release_endtime2();
  inline void set_allocated_endtime2(::std::string* endtime2);

  // optional string BeginDate = 7;
  inline bool has_begindate() const;
  inline void clear_begindate();
  static const int kBeginDateFieldNumber = 7;
  inline const ::std::string& begindate() const;
  inline void set_begindate(const ::std::string& value);
  inline void set_begindate(const char* value);
  inline void set_begindate(const char* value, size_t size);
  inline ::std::string* mutable_begindate();
  inline ::std::string* release_begindate();
  inline void set_allocated_begindate(::std::string* begindate);

  // optional string EndDate = 8;
  inline bool has_enddate() const;
  inline void clear_enddate();
  static const int kEndDateFieldNumber = 8;
  inline const ::std::string& enddate() const;
  inline void set_enddate(const ::std::string& value);
  inline void set_enddate(const char* value);
  inline void set_enddate(const char* value, size_t size);
  inline ::std::string* mutable_enddate();
  inline ::std::string* release_enddate();
  inline void set_allocated_enddate(::std::string* enddate);

  // @@protoc_insertion_point(class_scope:ContractConfig.ContractItem)
 private:
  inline void set_has_contractname();
  inline void clear_has_contractname();
  inline void set_has_contractcode();
  inline void clear_has_contractcode();
  inline void set_has_begintime1();
  inline void clear_has_begintime1();
  inline void set_has_endtime1();
  inline void clear_has_endtime1();
  inline void set_has_begintime2();
  inline void clear_has_begintime2();
  inline void set_has_endtime2();
  inline void clear_has_endtime2();
  inline void set_has_begindate();
  inline void clear_has_begindate();
  inline void set_has_enddate();
  inline void clear_has_enddate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* contractname_;
  ::std::string* contractcode_;
  ::std::string* begintime1_;
  ::std::string* endtime1_;
  ::std::string* begintime2_;
  ::std::string* endtime2_;
  ::std::string* begindate_;
  ::std::string* enddate_;
  friend void  protobuf_AddDesc_ContractConfig_2eproto();
  friend void protobuf_AssignDesc_ContractConfig_2eproto();
  friend void protobuf_ShutdownFile_ContractConfig_2eproto();

  void InitAsDefaultInstance();
  static ContractConfig_ContractItem* default_instance_;
};
// -------------------------------------------------------------------

class ContractConfig : public ::google::protobuf::Message {
 public:
  ContractConfig();
  virtual ~ContractConfig();

  ContractConfig(const ContractConfig& from);

  inline ContractConfig& operator=(const ContractConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContractConfig& default_instance();

  void Swap(ContractConfig* other);

  // implements Message ----------------------------------------------

  ContractConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContractConfig& from);
  void MergeFrom(const ContractConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ContractConfig_ContractItem ContractItem;

  // accessors -------------------------------------------------------

  // repeated .ContractConfig.ContractItem Contracts = 9;
  inline int contracts_size() const;
  inline void clear_contracts();
  static const int kContractsFieldNumber = 9;
  inline const ::ContractConfig_ContractItem& contracts(int index) const;
  inline ::ContractConfig_ContractItem* mutable_contracts(int index);
  inline ::ContractConfig_ContractItem* add_contracts();
  inline const ::google::protobuf::RepeatedPtrField< ::ContractConfig_ContractItem >&
      contracts() const;
  inline ::google::protobuf::RepeatedPtrField< ::ContractConfig_ContractItem >*
      mutable_contracts();

  // @@protoc_insertion_point(class_scope:ContractConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ContractConfig_ContractItem > contracts_;
  friend void  protobuf_AddDesc_ContractConfig_2eproto();
  friend void protobuf_AssignDesc_ContractConfig_2eproto();
  friend void protobuf_ShutdownFile_ContractConfig_2eproto();

  void InitAsDefaultInstance();
  static ContractConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// ContractConfig_ContractItem

// optional string ContractName = 1;
inline bool ContractConfig_ContractItem::has_contractname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContractConfig_ContractItem::set_has_contractname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContractConfig_ContractItem::clear_has_contractname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContractConfig_ContractItem::clear_contractname() {
  if (contractname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractname_->clear();
  }
  clear_has_contractname();
}
inline const ::std::string& ContractConfig_ContractItem::contractname() const {
  // @@protoc_insertion_point(field_get:ContractConfig.ContractItem.ContractName)
  return *contractname_;
}
inline void ContractConfig_ContractItem::set_contractname(const ::std::string& value) {
  set_has_contractname();
  if (contractname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractname_ = new ::std::string;
  }
  contractname_->assign(value);
  // @@protoc_insertion_point(field_set:ContractConfig.ContractItem.ContractName)
}
inline void ContractConfig_ContractItem::set_contractname(const char* value) {
  set_has_contractname();
  if (contractname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractname_ = new ::std::string;
  }
  contractname_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContractConfig.ContractItem.ContractName)
}
inline void ContractConfig_ContractItem::set_contractname(const char* value, size_t size) {
  set_has_contractname();
  if (contractname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractname_ = new ::std::string;
  }
  contractname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContractConfig.ContractItem.ContractName)
}
inline ::std::string* ContractConfig_ContractItem::mutable_contractname() {
  set_has_contractname();
  if (contractname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContractConfig.ContractItem.ContractName)
  return contractname_;
}
inline ::std::string* ContractConfig_ContractItem::release_contractname() {
  clear_has_contractname();
  if (contractname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contractname_;
    contractname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContractConfig_ContractItem::set_allocated_contractname(::std::string* contractname) {
  if (contractname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractname_;
  }
  if (contractname) {
    set_has_contractname();
    contractname_ = contractname;
  } else {
    clear_has_contractname();
    contractname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContractConfig.ContractItem.ContractName)
}

// optional string ContractCode = 2;
inline bool ContractConfig_ContractItem::has_contractcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContractConfig_ContractItem::set_has_contractcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContractConfig_ContractItem::clear_has_contractcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContractConfig_ContractItem::clear_contractcode() {
  if (contractcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractcode_->clear();
  }
  clear_has_contractcode();
}
inline const ::std::string& ContractConfig_ContractItem::contractcode() const {
  // @@protoc_insertion_point(field_get:ContractConfig.ContractItem.ContractCode)
  return *contractcode_;
}
inline void ContractConfig_ContractItem::set_contractcode(const ::std::string& value) {
  set_has_contractcode();
  if (contractcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractcode_ = new ::std::string;
  }
  contractcode_->assign(value);
  // @@protoc_insertion_point(field_set:ContractConfig.ContractItem.ContractCode)
}
inline void ContractConfig_ContractItem::set_contractcode(const char* value) {
  set_has_contractcode();
  if (contractcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractcode_ = new ::std::string;
  }
  contractcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContractConfig.ContractItem.ContractCode)
}
inline void ContractConfig_ContractItem::set_contractcode(const char* value, size_t size) {
  set_has_contractcode();
  if (contractcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractcode_ = new ::std::string;
  }
  contractcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContractConfig.ContractItem.ContractCode)
}
inline ::std::string* ContractConfig_ContractItem::mutable_contractcode() {
  set_has_contractcode();
  if (contractcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContractConfig.ContractItem.ContractCode)
  return contractcode_;
}
inline ::std::string* ContractConfig_ContractItem::release_contractcode() {
  clear_has_contractcode();
  if (contractcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contractcode_;
    contractcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContractConfig_ContractItem::set_allocated_contractcode(::std::string* contractcode) {
  if (contractcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractcode_;
  }
  if (contractcode) {
    set_has_contractcode();
    contractcode_ = contractcode;
  } else {
    clear_has_contractcode();
    contractcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContractConfig.ContractItem.ContractCode)
}

// optional string BeginTime1 = 3;
inline bool ContractConfig_ContractItem::has_begintime1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContractConfig_ContractItem::set_has_begintime1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContractConfig_ContractItem::clear_has_begintime1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContractConfig_ContractItem::clear_begintime1() {
  if (begintime1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime1_->clear();
  }
  clear_has_begintime1();
}
inline const ::std::string& ContractConfig_ContractItem::begintime1() const {
  // @@protoc_insertion_point(field_get:ContractConfig.ContractItem.BeginTime1)
  return *begintime1_;
}
inline void ContractConfig_ContractItem::set_begintime1(const ::std::string& value) {
  set_has_begintime1();
  if (begintime1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime1_ = new ::std::string;
  }
  begintime1_->assign(value);
  // @@protoc_insertion_point(field_set:ContractConfig.ContractItem.BeginTime1)
}
inline void ContractConfig_ContractItem::set_begintime1(const char* value) {
  set_has_begintime1();
  if (begintime1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime1_ = new ::std::string;
  }
  begintime1_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContractConfig.ContractItem.BeginTime1)
}
inline void ContractConfig_ContractItem::set_begintime1(const char* value, size_t size) {
  set_has_begintime1();
  if (begintime1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime1_ = new ::std::string;
  }
  begintime1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContractConfig.ContractItem.BeginTime1)
}
inline ::std::string* ContractConfig_ContractItem::mutable_begintime1() {
  set_has_begintime1();
  if (begintime1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContractConfig.ContractItem.BeginTime1)
  return begintime1_;
}
inline ::std::string* ContractConfig_ContractItem::release_begintime1() {
  clear_has_begintime1();
  if (begintime1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = begintime1_;
    begintime1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContractConfig_ContractItem::set_allocated_begintime1(::std::string* begintime1) {
  if (begintime1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete begintime1_;
  }
  if (begintime1) {
    set_has_begintime1();
    begintime1_ = begintime1;
  } else {
    clear_has_begintime1();
    begintime1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContractConfig.ContractItem.BeginTime1)
}

// optional string EndTime1 = 4;
inline bool ContractConfig_ContractItem::has_endtime1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContractConfig_ContractItem::set_has_endtime1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContractConfig_ContractItem::clear_has_endtime1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContractConfig_ContractItem::clear_endtime1() {
  if (endtime1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime1_->clear();
  }
  clear_has_endtime1();
}
inline const ::std::string& ContractConfig_ContractItem::endtime1() const {
  // @@protoc_insertion_point(field_get:ContractConfig.ContractItem.EndTime1)
  return *endtime1_;
}
inline void ContractConfig_ContractItem::set_endtime1(const ::std::string& value) {
  set_has_endtime1();
  if (endtime1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime1_ = new ::std::string;
  }
  endtime1_->assign(value);
  // @@protoc_insertion_point(field_set:ContractConfig.ContractItem.EndTime1)
}
inline void ContractConfig_ContractItem::set_endtime1(const char* value) {
  set_has_endtime1();
  if (endtime1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime1_ = new ::std::string;
  }
  endtime1_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContractConfig.ContractItem.EndTime1)
}
inline void ContractConfig_ContractItem::set_endtime1(const char* value, size_t size) {
  set_has_endtime1();
  if (endtime1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime1_ = new ::std::string;
  }
  endtime1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContractConfig.ContractItem.EndTime1)
}
inline ::std::string* ContractConfig_ContractItem::mutable_endtime1() {
  set_has_endtime1();
  if (endtime1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContractConfig.ContractItem.EndTime1)
  return endtime1_;
}
inline ::std::string* ContractConfig_ContractItem::release_endtime1() {
  clear_has_endtime1();
  if (endtime1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = endtime1_;
    endtime1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContractConfig_ContractItem::set_allocated_endtime1(::std::string* endtime1) {
  if (endtime1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime1_;
  }
  if (endtime1) {
    set_has_endtime1();
    endtime1_ = endtime1;
  } else {
    clear_has_endtime1();
    endtime1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContractConfig.ContractItem.EndTime1)
}

// optional string BeginTime2 = 5;
inline bool ContractConfig_ContractItem::has_begintime2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContractConfig_ContractItem::set_has_begintime2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContractConfig_ContractItem::clear_has_begintime2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContractConfig_ContractItem::clear_begintime2() {
  if (begintime2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime2_->clear();
  }
  clear_has_begintime2();
}
inline const ::std::string& ContractConfig_ContractItem::begintime2() const {
  // @@protoc_insertion_point(field_get:ContractConfig.ContractItem.BeginTime2)
  return *begintime2_;
}
inline void ContractConfig_ContractItem::set_begintime2(const ::std::string& value) {
  set_has_begintime2();
  if (begintime2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime2_ = new ::std::string;
  }
  begintime2_->assign(value);
  // @@protoc_insertion_point(field_set:ContractConfig.ContractItem.BeginTime2)
}
inline void ContractConfig_ContractItem::set_begintime2(const char* value) {
  set_has_begintime2();
  if (begintime2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime2_ = new ::std::string;
  }
  begintime2_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContractConfig.ContractItem.BeginTime2)
}
inline void ContractConfig_ContractItem::set_begintime2(const char* value, size_t size) {
  set_has_begintime2();
  if (begintime2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime2_ = new ::std::string;
  }
  begintime2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContractConfig.ContractItem.BeginTime2)
}
inline ::std::string* ContractConfig_ContractItem::mutable_begintime2() {
  set_has_begintime2();
  if (begintime2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begintime2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContractConfig.ContractItem.BeginTime2)
  return begintime2_;
}
inline ::std::string* ContractConfig_ContractItem::release_begintime2() {
  clear_has_begintime2();
  if (begintime2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = begintime2_;
    begintime2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContractConfig_ContractItem::set_allocated_begintime2(::std::string* begintime2) {
  if (begintime2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete begintime2_;
  }
  if (begintime2) {
    set_has_begintime2();
    begintime2_ = begintime2;
  } else {
    clear_has_begintime2();
    begintime2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContractConfig.ContractItem.BeginTime2)
}

// optional string EndTime2 = 6;
inline bool ContractConfig_ContractItem::has_endtime2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContractConfig_ContractItem::set_has_endtime2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContractConfig_ContractItem::clear_has_endtime2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContractConfig_ContractItem::clear_endtime2() {
  if (endtime2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime2_->clear();
  }
  clear_has_endtime2();
}
inline const ::std::string& ContractConfig_ContractItem::endtime2() const {
  // @@protoc_insertion_point(field_get:ContractConfig.ContractItem.EndTime2)
  return *endtime2_;
}
inline void ContractConfig_ContractItem::set_endtime2(const ::std::string& value) {
  set_has_endtime2();
  if (endtime2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime2_ = new ::std::string;
  }
  endtime2_->assign(value);
  // @@protoc_insertion_point(field_set:ContractConfig.ContractItem.EndTime2)
}
inline void ContractConfig_ContractItem::set_endtime2(const char* value) {
  set_has_endtime2();
  if (endtime2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime2_ = new ::std::string;
  }
  endtime2_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContractConfig.ContractItem.EndTime2)
}
inline void ContractConfig_ContractItem::set_endtime2(const char* value, size_t size) {
  set_has_endtime2();
  if (endtime2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime2_ = new ::std::string;
  }
  endtime2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContractConfig.ContractItem.EndTime2)
}
inline ::std::string* ContractConfig_ContractItem::mutable_endtime2() {
  set_has_endtime2();
  if (endtime2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endtime2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContractConfig.ContractItem.EndTime2)
  return endtime2_;
}
inline ::std::string* ContractConfig_ContractItem::release_endtime2() {
  clear_has_endtime2();
  if (endtime2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = endtime2_;
    endtime2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContractConfig_ContractItem::set_allocated_endtime2(::std::string* endtime2) {
  if (endtime2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endtime2_;
  }
  if (endtime2) {
    set_has_endtime2();
    endtime2_ = endtime2;
  } else {
    clear_has_endtime2();
    endtime2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContractConfig.ContractItem.EndTime2)
}

// optional string BeginDate = 7;
inline bool ContractConfig_ContractItem::has_begindate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ContractConfig_ContractItem::set_has_begindate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ContractConfig_ContractItem::clear_has_begindate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ContractConfig_ContractItem::clear_begindate() {
  if (begindate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begindate_->clear();
  }
  clear_has_begindate();
}
inline const ::std::string& ContractConfig_ContractItem::begindate() const {
  // @@protoc_insertion_point(field_get:ContractConfig.ContractItem.BeginDate)
  return *begindate_;
}
inline void ContractConfig_ContractItem::set_begindate(const ::std::string& value) {
  set_has_begindate();
  if (begindate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begindate_ = new ::std::string;
  }
  begindate_->assign(value);
  // @@protoc_insertion_point(field_set:ContractConfig.ContractItem.BeginDate)
}
inline void ContractConfig_ContractItem::set_begindate(const char* value) {
  set_has_begindate();
  if (begindate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begindate_ = new ::std::string;
  }
  begindate_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContractConfig.ContractItem.BeginDate)
}
inline void ContractConfig_ContractItem::set_begindate(const char* value, size_t size) {
  set_has_begindate();
  if (begindate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begindate_ = new ::std::string;
  }
  begindate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContractConfig.ContractItem.BeginDate)
}
inline ::std::string* ContractConfig_ContractItem::mutable_begindate() {
  set_has_begindate();
  if (begindate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    begindate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContractConfig.ContractItem.BeginDate)
  return begindate_;
}
inline ::std::string* ContractConfig_ContractItem::release_begindate() {
  clear_has_begindate();
  if (begindate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = begindate_;
    begindate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContractConfig_ContractItem::set_allocated_begindate(::std::string* begindate) {
  if (begindate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete begindate_;
  }
  if (begindate) {
    set_has_begindate();
    begindate_ = begindate;
  } else {
    clear_has_begindate();
    begindate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContractConfig.ContractItem.BeginDate)
}

// optional string EndDate = 8;
inline bool ContractConfig_ContractItem::has_enddate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ContractConfig_ContractItem::set_has_enddate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ContractConfig_ContractItem::clear_has_enddate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ContractConfig_ContractItem::clear_enddate() {
  if (enddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enddate_->clear();
  }
  clear_has_enddate();
}
inline const ::std::string& ContractConfig_ContractItem::enddate() const {
  // @@protoc_insertion_point(field_get:ContractConfig.ContractItem.EndDate)
  return *enddate_;
}
inline void ContractConfig_ContractItem::set_enddate(const ::std::string& value) {
  set_has_enddate();
  if (enddate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enddate_ = new ::std::string;
  }
  enddate_->assign(value);
  // @@protoc_insertion_point(field_set:ContractConfig.ContractItem.EndDate)
}
inline void ContractConfig_ContractItem::set_enddate(const char* value) {
  set_has_enddate();
  if (enddate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enddate_ = new ::std::string;
  }
  enddate_->assign(value);
  // @@protoc_insertion_point(field_set_char:ContractConfig.ContractItem.EndDate)
}
inline void ContractConfig_ContractItem::set_enddate(const char* value, size_t size) {
  set_has_enddate();
  if (enddate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enddate_ = new ::std::string;
  }
  enddate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContractConfig.ContractItem.EndDate)
}
inline ::std::string* ContractConfig_ContractItem::mutable_enddate() {
  set_has_enddate();
  if (enddate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enddate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ContractConfig.ContractItem.EndDate)
  return enddate_;
}
inline ::std::string* ContractConfig_ContractItem::release_enddate() {
  clear_has_enddate();
  if (enddate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = enddate_;
    enddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContractConfig_ContractItem::set_allocated_enddate(::std::string* enddate) {
  if (enddate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enddate_;
  }
  if (enddate) {
    set_has_enddate();
    enddate_ = enddate;
  } else {
    clear_has_enddate();
    enddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ContractConfig.ContractItem.EndDate)
}

// -------------------------------------------------------------------

// ContractConfig

// repeated .ContractConfig.ContractItem Contracts = 9;
inline int ContractConfig::contracts_size() const {
  return contracts_.size();
}
inline void ContractConfig::clear_contracts() {
  contracts_.Clear();
}
inline const ::ContractConfig_ContractItem& ContractConfig::contracts(int index) const {
  // @@protoc_insertion_point(field_get:ContractConfig.Contracts)
  return contracts_.Get(index);
}
inline ::ContractConfig_ContractItem* ContractConfig::mutable_contracts(int index) {
  // @@protoc_insertion_point(field_mutable:ContractConfig.Contracts)
  return contracts_.Mutable(index);
}
inline ::ContractConfig_ContractItem* ContractConfig::add_contracts() {
  // @@protoc_insertion_point(field_add:ContractConfig.Contracts)
  return contracts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContractConfig_ContractItem >&
ContractConfig::contracts() const {
  // @@protoc_insertion_point(field_list:ContractConfig.Contracts)
  return contracts_;
}
inline ::google::protobuf::RepeatedPtrField< ::ContractConfig_ContractItem >*
ContractConfig::mutable_contracts() {
  // @@protoc_insertion_point(field_mutable_list:ContractConfig.Contracts)
  return &contracts_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ContractConfig_2eproto__INCLUDED
